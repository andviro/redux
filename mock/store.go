// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package mock

import (
	"github.com/andviro/redux"
	"sync"
)

var (
	lockStoreMockDispatch       sync.RWMutex
	lockStoreMockGetState       sync.RWMutex
	lockStoreMockReplaceReducer sync.RWMutex
	lockStoreMockSubscribe      sync.RWMutex
)

// StoreMock is a mock implementation of Store.
//
//     func TestSomethingThatUsesStore(t *testing.T) {
//
//         // make and configure a mocked Store
//         mockedStore := &StoreMock{
//             DispatchFunc: func(in1 redux.Action) redux.Action {
// 	               panic("TODO: mock out the Dispatch method")
//             },
//             GetStateFunc: func() redux.State {
// 	               panic("TODO: mock out the GetState method")
//             },
//             ReplaceReducerFunc: func(in1 redux.Reducer)  {
// 	               panic("TODO: mock out the ReplaceReducer method")
//             },
//             SubscribeFunc: func(in1 redux.Listener) redux.UnsubscribeFunc {
// 	               panic("TODO: mock out the Subscribe method")
//             },
//         }
//
//         // TODO: use mockedStore in code that requires Store
//         //       and then make assertions.
//
//     }
type StoreMock struct {
	// DispatchFunc mocks the Dispatch method.
	DispatchFunc func(in1 redux.Action) redux.Action

	// GetStateFunc mocks the GetState method.
	GetStateFunc func() redux.State

	// ReplaceReducerFunc mocks the ReplaceReducer method.
	ReplaceReducerFunc func(in1 redux.Reducer)

	// SubscribeFunc mocks the Subscribe method.
	SubscribeFunc func(in1 redux.Listener) redux.UnsubscribeFunc

	// calls tracks calls to the methods.
	calls struct {
		// Dispatch holds details about calls to the Dispatch method.
		Dispatch []struct {
			// In1 is the in1 argument value.
			In1 redux.Action
		}
		// GetState holds details about calls to the GetState method.
		GetState []struct {
		}
		// ReplaceReducer holds details about calls to the ReplaceReducer method.
		ReplaceReducer []struct {
			// In1 is the in1 argument value.
			In1 redux.Reducer
		}
		// Subscribe holds details about calls to the Subscribe method.
		Subscribe []struct {
			// In1 is the in1 argument value.
			In1 redux.Listener
		}
	}
}

// Dispatch calls DispatchFunc.
func (mock *StoreMock) Dispatch(in1 redux.Action) redux.Action {
	if mock.DispatchFunc == nil {
		panic("moq: StoreMock.DispatchFunc is nil but Store.Dispatch was just called")
	}
	callInfo := struct {
		In1 redux.Action
	}{
		In1: in1,
	}
	lockStoreMockDispatch.Lock()
	mock.calls.Dispatch = append(mock.calls.Dispatch, callInfo)
	lockStoreMockDispatch.Unlock()
	return mock.DispatchFunc(in1)
}

// DispatchCalls gets all the calls that were made to Dispatch.
// Check the length with:
//     len(mockedStore.DispatchCalls())
func (mock *StoreMock) DispatchCalls() []struct {
	In1 redux.Action
} {
	var calls []struct {
		In1 redux.Action
	}
	lockStoreMockDispatch.RLock()
	calls = mock.calls.Dispatch
	lockStoreMockDispatch.RUnlock()
	return calls
}

// GetState calls GetStateFunc.
func (mock *StoreMock) GetState() redux.State {
	if mock.GetStateFunc == nil {
		panic("moq: StoreMock.GetStateFunc is nil but Store.GetState was just called")
	}
	callInfo := struct {
	}{}
	lockStoreMockGetState.Lock()
	mock.calls.GetState = append(mock.calls.GetState, callInfo)
	lockStoreMockGetState.Unlock()
	return mock.GetStateFunc()
}

// GetStateCalls gets all the calls that were made to GetState.
// Check the length with:
//     len(mockedStore.GetStateCalls())
func (mock *StoreMock) GetStateCalls() []struct {
} {
	var calls []struct {
	}
	lockStoreMockGetState.RLock()
	calls = mock.calls.GetState
	lockStoreMockGetState.RUnlock()
	return calls
}

// ReplaceReducer calls ReplaceReducerFunc.
func (mock *StoreMock) ReplaceReducer(in1 redux.Reducer) {
	if mock.ReplaceReducerFunc == nil {
		panic("moq: StoreMock.ReplaceReducerFunc is nil but Store.ReplaceReducer was just called")
	}
	callInfo := struct {
		In1 redux.Reducer
	}{
		In1: in1,
	}
	lockStoreMockReplaceReducer.Lock()
	mock.calls.ReplaceReducer = append(mock.calls.ReplaceReducer, callInfo)
	lockStoreMockReplaceReducer.Unlock()
	mock.ReplaceReducerFunc(in1)
}

// ReplaceReducerCalls gets all the calls that were made to ReplaceReducer.
// Check the length with:
//     len(mockedStore.ReplaceReducerCalls())
func (mock *StoreMock) ReplaceReducerCalls() []struct {
	In1 redux.Reducer
} {
	var calls []struct {
		In1 redux.Reducer
	}
	lockStoreMockReplaceReducer.RLock()
	calls = mock.calls.ReplaceReducer
	lockStoreMockReplaceReducer.RUnlock()
	return calls
}

// Subscribe calls SubscribeFunc.
func (mock *StoreMock) Subscribe(in1 redux.Listener) redux.UnsubscribeFunc {
	if mock.SubscribeFunc == nil {
		panic("moq: StoreMock.SubscribeFunc is nil but Store.Subscribe was just called")
	}
	callInfo := struct {
		In1 redux.Listener
	}{
		In1: in1,
	}
	lockStoreMockSubscribe.Lock()
	mock.calls.Subscribe = append(mock.calls.Subscribe, callInfo)
	lockStoreMockSubscribe.Unlock()
	return mock.SubscribeFunc(in1)
}

// SubscribeCalls gets all the calls that were made to Subscribe.
// Check the length with:
//     len(mockedStore.SubscribeCalls())
func (mock *StoreMock) SubscribeCalls() []struct {
	In1 redux.Listener
} {
	var calls []struct {
		In1 redux.Listener
	}
	lockStoreMockSubscribe.RLock()
	calls = mock.calls.Subscribe
	lockStoreMockSubscribe.RUnlock()
	return calls
}
